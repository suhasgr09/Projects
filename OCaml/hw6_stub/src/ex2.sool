(* ex2.sool *)

(* interface and class declarations *)

interface tree {
   method int sum ()
   method bool equal (t:tree)
}

class interior_node extends object implements tree {
   field tree left
   field tree right
   method unit initialize(l:tree, r:tree) {
     begin
      set left = l;
      set right = r
     end
   }
   method tree getleft () { left }
   method tree getright () { right }
   method int sum () {send left sum() + send right sum() } 
   method bool equal (t:tree) {
     if instanceof?(t,interior_node)
     then if send left equal(send
			      cast(t,interior_node)
			      getleft())
	  then send right equal(send
				 cast(t,interior_node)
				 getright())
	  else zero?(1)
     else zero?(1)
     }
}

class leaf_node extends object implements tree {
   field int value
   method unit initialize (v:int) { set value = v }
   method int sum() { value }
   method int getvalue() { value }
   method bool equal (t:tree) {
     if instanceof?(t,leaf_node)
     then zero?(value - send cast(t,leaf_node) getvalue())
     else zero?(1)
   } 
}

(* main expression *)

let o1 = new interior_node ( new interior_node (
           new leaf_node(3),
           new leaf_node(4)),
         new leaf_node(5))
in list(send o1 sum(),
if send o1 equal(o1) then 100 else 200)
